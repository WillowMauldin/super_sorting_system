diff --git a/node_modules/mineflayer/lib/plugins/game.js b/node_modules/mineflayer/lib/plugins/game.js
index 3bbf5b2..0d44c82 100644
--- a/node_modules/mineflayer/lib/plugins/game.js
+++ b/node_modules/mineflayer/lib/plugins/game.js
@@ -116,7 +116,7 @@ function inject (bot, options) {
   })
 
   bot._client.on('game_state_change', (packet) => {
-    if (packet?.reason === 4 && packet?.gameMode === 1) {
+    if (packet?.reason === 4) {
       bot._client.write('client_command', { action: 0 })
     }
     if (packet.reason === 3) {
diff --git a/node_modules/mineflayer/lib/plugins/generic_place.js b/node_modules/mineflayer/lib/plugins/generic_place.js
index 448dfc0..191cfbd 100644
--- a/node_modules/mineflayer/lib/plugins/generic_place.js
+++ b/node_modules/mineflayer/lib/plugins/generic_place.js
@@ -34,7 +34,7 @@ function inject (bot) {
       dz = options.delta.z
     }
     if (options.forceLook !== 'ignore') {
-      await bot.lookAt(referenceBlock.position.offset(dx, dy, dz), options.forceLook)
+      // await bot.lookAt(referenceBlock.position.offset(dx, dy, dz), options.forceLook)
     }
     // TODO: tell the server that we are sneaking while doing this
     const pos = referenceBlock.position
diff --git a/node_modules/mineflayer/lib/plugins/inventory.js b/node_modules/mineflayer/lib/plugins/inventory.js
index 70db312..889f427 100644
--- a/node_modules/mineflayer/lib/plugins/inventory.js
+++ b/node_modules/mineflayer/lib/plugins/inventory.js
@@ -188,7 +188,7 @@ function inject (bot, { hideErrors }) {
     const directionNum = vectorToDirection(direction) // The packet needs a number as the direction
     cursorPos = cursorPos ?? new Vec3(0.5, 0.5, 0.5)
     // TODO: tell the server that we are not sneaking while doing this
-    await bot.lookAt(block.position.offset(0.5, 0.5, 0.5), false)
+    // await bot.lookAt(block.position.offset(0.5, 0.5, 0.5), false)
     // place block message
     // TODO: logic below can likely be simplified
     if (bot.supportFeature('blockPlaceHasHeldItem')) {
@@ -238,7 +238,7 @@ function inject (bot, { hideErrors }) {
 
   async function activateEntity (entity) {
     // TODO: tell the server that we are not sneaking while doing this
-    await bot.lookAt(entity.position.offset(0, 1, 0), false)
+    // await bot.lookAt(entity.position.offset(0, 1, 0), false)
     bot._client.write('use_entity', {
       target: entity.id,
       mouse: 0, // interact with entity
@@ -249,7 +249,7 @@ function inject (bot, { hideErrors }) {
 
   async function activateEntityAt (entity, position) {
     // TODO: tell the server that we are not sneaking while doing this
-    await bot.lookAt(position, false)
+    // await bot.lookAt(position, false)
     bot._client.write('use_entity', {
       target: entity.id,
       mouse: 2, // interact with entity at
diff --git a/node_modules/mineflayer/lib/plugins/physics.js b/node_modules/mineflayer/lib/plugins/physics.js
index 588dfbb..81f0b50 100644
--- a/node_modules/mineflayer/lib/plugins/physics.js
+++ b/node_modules/mineflayer/lib/plugins/physics.js
@@ -312,11 +312,8 @@ function inject (bot, { physicsEnabled, maxCatchupTicks }) {
     }
     lookingTask = createTask()
 
-    // this is done to bypass certain anticheat checks that detect the player's sensitivity
-    // by calculating the gcd of how much they move the mouse each tick
-    const sensitivity = conv.fromNotchianPitch(0.15) // this is equal to 100% sensitivity in vanilla
-    const yawChange = Math.round((yaw - bot.entity.yaw) / sensitivity) * sensitivity
-    const pitchChange = Math.round((pitch - bot.entity.pitch) / sensitivity) * sensitivity
+    const yawChange = yaw - bot.entity.yaw
+    const pitchChange = pitch - bot.entity.pitch
 
     if (yawChange === 0 && pitchChange === 0) {
       return
